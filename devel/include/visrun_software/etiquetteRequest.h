// Generated by gencpp from file visrun_software/etiquetteRequest.msg
// DO NOT EDIT!


#ifndef VISRUN_SOFTWARE_MESSAGE_ETIQUETTEREQUEST_H
#define VISRUN_SOFTWARE_MESSAGE_ETIQUETTEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Image.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace visrun_software
{
template <class ContainerAllocator>
struct etiquetteRequest_
{
  typedef etiquetteRequest_<ContainerAllocator> Type;

  etiquetteRequest_()
    : image()
    , Upper_Limit(0)
    , Lower_Limit(0)
    , Max_Angle(0)
    , Min_Angle(0)
    , upper_threshold()
    , lower_threshold()  {
    }
  etiquetteRequest_(const ContainerAllocator& _alloc)
    : image(_alloc)
    , Upper_Limit(0)
    , Lower_Limit(0)
    , Max_Angle(0)
    , Min_Angle(0)
    , upper_threshold(_alloc)
    , lower_threshold(_alloc)  {
  (void)_alloc;
    }



   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image_type;
  _image_type image;

   typedef int32_t _Upper_Limit_type;
  _Upper_Limit_type Upper_Limit;

   typedef int32_t _Lower_Limit_type;
  _Lower_Limit_type Lower_Limit;

   typedef int32_t _Max_Angle_type;
  _Max_Angle_type Max_Angle;

   typedef int32_t _Min_Angle_type;
  _Min_Angle_type Min_Angle;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _upper_threshold_type;
  _upper_threshold_type upper_threshold;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _lower_threshold_type;
  _lower_threshold_type lower_threshold;





  typedef boost::shared_ptr< ::visrun_software::etiquetteRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visrun_software::etiquetteRequest_<ContainerAllocator> const> ConstPtr;

}; // struct etiquetteRequest_

typedef ::visrun_software::etiquetteRequest_<std::allocator<void> > etiquetteRequest;

typedef boost::shared_ptr< ::visrun_software::etiquetteRequest > etiquetteRequestPtr;
typedef boost::shared_ptr< ::visrun_software::etiquetteRequest const> etiquetteRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::visrun_software::etiquetteRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::visrun_software::etiquetteRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::visrun_software::etiquetteRequest_<ContainerAllocator1> & lhs, const ::visrun_software::etiquetteRequest_<ContainerAllocator2> & rhs)
{
  return lhs.image == rhs.image &&
    lhs.Upper_Limit == rhs.Upper_Limit &&
    lhs.Lower_Limit == rhs.Lower_Limit &&
    lhs.Max_Angle == rhs.Max_Angle &&
    lhs.Min_Angle == rhs.Min_Angle &&
    lhs.upper_threshold == rhs.upper_threshold &&
    lhs.lower_threshold == rhs.lower_threshold;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::visrun_software::etiquetteRequest_<ContainerAllocator1> & lhs, const ::visrun_software::etiquetteRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace visrun_software

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::visrun_software::etiquetteRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visrun_software::etiquetteRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visrun_software::etiquetteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visrun_software::etiquetteRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visrun_software::etiquetteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visrun_software::etiquetteRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::visrun_software::etiquetteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8b1af87ff4de73234d036e1b0cb6faf3";
  }

  static const char* value(const ::visrun_software::etiquetteRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8b1af87ff4de7323ULL;
  static const uint64_t static_value2 = 0x4d036e1b0cb6faf3ULL;
};

template<class ContainerAllocator>
struct DataType< ::visrun_software::etiquetteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "visrun_software/etiquetteRequest";
  }

  static const char* value(const ::visrun_software::etiquetteRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::visrun_software::etiquetteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_msgs/Image image\n"
"int32 Upper_Limit\n"
"int32 Lower_Limit \n"
"int32 Max_Angle \n"
"int32 Min_Angle \n"
"geometry_msgs/Vector3 upper_threshold\n"
"geometry_msgs/Vector3 lower_threshold\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::visrun_software::etiquetteRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::visrun_software::etiquetteRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.image);
      stream.next(m.Upper_Limit);
      stream.next(m.Lower_Limit);
      stream.next(m.Max_Angle);
      stream.next(m.Min_Angle);
      stream.next(m.upper_threshold);
      stream.next(m.lower_threshold);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct etiquetteRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visrun_software::etiquetteRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::visrun_software::etiquetteRequest_<ContainerAllocator>& v)
  {
    s << indent << "image: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.image);
    s << indent << "Upper_Limit: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Upper_Limit);
    s << indent << "Lower_Limit: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Lower_Limit);
    s << indent << "Max_Angle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Max_Angle);
    s << indent << "Min_Angle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Min_Angle);
    s << indent << "upper_threshold: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.upper_threshold);
    s << indent << "lower_threshold: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.lower_threshold);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISRUN_SOFTWARE_MESSAGE_ETIQUETTEREQUEST_H
